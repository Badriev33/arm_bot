import time
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import filters

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from pprint import pprint

import httplib2
import apiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials 

#from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

CREDENTIALS_FILE = ''
spreadsheet_id = ''

credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CREDENTIALS_FILE,
    ['https://www.googleapis.com/auth/spreadsheets',
     'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http = httpAuth)

# values = service.spreadsheets().values().get(
#     spreadsheetId=spreadsheet_id,
#     range='A1:E10',
#     majorDimension='COLUMNS'
# ).execute()
# pprint(values)

TOKEN = ""

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

statusStand1 = "–°–≤–æ–±–æ–¥–µ–Ω‚úÖ"
statusStand2 = "–°–≤–æ–±–æ–¥–µ–Ω‚úÖ"

current_step = None
nickname = None
style_music = None


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    
    kb = [
        [
            types.KeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ"),
            types.KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ö–Ω—é/–±–∞—Ä/—Ä—ã–Ω–æ—á–µ–∫ üå≠üçªüé®")
        ]
    ]

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.reply(f"<b>–ó–∞—è–≤–∫–∞ DJ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ WitcheStek 2024</b>\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ 24 –∏—é–ª—è.–û–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º 1 –∞–≤–≥—É—Å—Ç–∞, —Ç–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º,\n–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–Ω—ã –¥–ª—è –ª–∞–π–Ω-–∞–ø–∞.\n\n–í–ê–ñ–ù–û: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –¥–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤ —É—á–∞—Å—Ç–∏–∏.\n–í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏\n–ø–æ—Å–ª–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∞–π–Ω-–∞–ø–∞.\n–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ –ø—É–ª—å—Ç–æ–º –≤—ã–¥–µ–ª—è—é—Ç—Å—è –¥–ª—è DJ —Å–∞—É–Ω–¥-—Å–∏—Å—Ç–µ–º\n–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (Witches Sabbath, BulldoZZer, –°—ã–∑—Ä–∞–Ω–æ—á–∫–∞, Valhalla).",reply_markup=keyboard, parse_mode='HTML')


#–û–±—Ä–∞–±–æ—Ç–∫–∞ DJ
@dp.message_handler(Text(equals='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É ‚úÖ', ignore_case=True))
async def process_start_application(message: types.Message):
    global current_step
    current_step = 'waiting_for_nickname'
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º")

@dp.message_handler(lambda message: current_step == 'waiting_for_nickname')
async def process_nickname(message: types.Message):
    global nickname, current_step
    nickname = message.text
    current_step = 'waiting_for_style_music'
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∂–∞–Ω—Ä")

@dp.message_handler(lambda message: current_step == 'waiting_for_style_music')
async def process_style_music(message: types.Message):
    global style_music, current_step
    style_music = message.text
    current_step = 'waiting_for_contact'
    await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∏–∫ —Ç–≥/—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∫)")

@dp.message_handler(lambda message: current_step == 'waiting_for_contact')
async def process_contact(message: types.Message):
    global nickname, style_music, current_step
    contact = message.text
    await bot.send_message(chat_id=1310388442, text=f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n–ñ–∞–Ω—Ä: {style_music}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}")
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É, –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!")
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range="A:C",  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ A, B, C
        valueInputOption="USER_ENTERED",
        body={
            "majorDimension": "ROWS",
            "values": [[nickname, style_music, contact]]
        }
    ).execute()
    current_step = None
    nickname = None
    style_music = None


#–û–±—Ä–∞–±–æ—Ç–∫–∞ –ö—É—Ö–Ω–∏/–ë–∞—Ä–∞
@dp.message_handler(Text(equals='–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ö–Ω—é/–±–∞—Ä/—Ä—ã–Ω–æ—á–µ–∫ üå≠üçªüé®', ignore_case=True))
async def process_kitchen_application(message: types.Message):
    await message.answer("—á—Ç–æ –ø–æ –ø–µ—á–µ–Ω—å–∫–∞–º?")


if __name__ == '__main__':
    executor.start_polling(dp)


