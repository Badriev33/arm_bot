import time
import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import filters

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

from pprint import pprint

import httplib2
import apiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials 


CREDENTIALS_FILE = 'creds.json'
spreadsheet_id = '1xYZIKaiM0bPjA-Qd-5geFTnvyA2t7M2wbxcm9tB4QWw'

credentials = ServiceAccountCredentials.from_json_keyfile_name(
    CREDENTIALS_FILE,
    ['https://www.googleapis.com/auth/spreadsheets',
     'https://www.googleapis.com/auth/drive'])
httpAuth = credentials.authorize(httplib2.Http())
service = apiclient.discovery.build('sheets', 'v4', http = httpAuth)

TOKEN = "7328590211:AAFu-1E7TK_8L43jTamVT2SJx6X3nyhQLNk"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


class DJForm(StatesGroup):
    nickname = State()
    style_music = State()
    contact = State()

class KitchenForm(StatesGroup):
    name = State()
    description = State()
    contact = State()

class MerchForm(StatesGroup):
    name = State()
    size = State()
    color = State()
    contact = State()


@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    kb = [
        [
            types.KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ DJ üéß"),
            types.KeyboardButton(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ö–Ω—é/–±–∞—Ä/—Ä—ã–Ω–æ—á–µ–∫ üå≠üçªüé®"),
        ],
        [
             types.KeyboardButton(text="–ö–æ–≥–¥–∞ —Ç—É—Å–∞? üåö"),
            #  types.KeyboardButton(text="–ì–¥–µ —Ç—É—Å–∞? üèù"),
        ],
        [
            # types.KeyboardButton(text="–ß—Ç–æ –º–Ω–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π? ‚õ∫Ô∏èü¶ç"),
            types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –¥–æ–Ω–∞—Ç–∏–∫ ‚ù§Ô∏è"),
        ],
        # [
        #     types.KeyboardButton(text="–ö—É–ø–∏—Ç—å –º–µ—Ä—á üëïüëö"),
        # ]
    ]

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è WS-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ª–µ–≥–∫–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≤–µ–Ω—Ç–µ –æ—Ç Witches Sabbath –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—É—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ—É –ø–æ –±–ª–∏–∂–∞–π—à–µ–º—É —Ä–µ–π–≤—É!",reply_markup=keyboard, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ DJ
@dp.message_handler(Text(equals='–ó–∞—è–≤–∫–∞ –Ω–∞ DJ üéß', ignore_case=True))
async def process_start_application(message: types.Message):
    await message.reply(f"–í–ê–ñ–ù–û! –ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –¥–∞–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏–∏ –≤ —É—á–∞—Å—Ç–∏–∏. –í—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏ –ø–æ—Å–ª–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∞–π–Ω-–∞–ø–∞. –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ –ø—É–ª—å—Ç–æ–º –≤—ã–¥–µ–ª—è—é—Ç—Å—è –¥–ª—è DJ —Å–∞—É–Ω–¥-—Å–∏—Å—Ç–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤. –ó–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –¥–æ 14 –∞–≤–≥—É—Å—Ç–∞.\n\nP.S. –ï—Å–ª–∏ —Ç—ã –∏–≥—Ä–∞–µ—à—å –ª—ë–≥–∫–∏–π –∂–∞–Ω—Ä, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É —á–∏–ª–ª-–∑–æ–Ω—ã, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å –Ω–∞ –≤—Ç–æ—Ä–æ–π —Ç–∞–Ω—Ü–ø–æ–ª:\n@G_0_T_L")
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_dj_application"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=inline_kb)

@dp.callback_query_handler(lambda c: c.data == 'start_dj_application', state=None)
async def start_dj_application(callback_query: types.CallbackQuery):
    await DJForm.nickname.set()
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º")

@dp.message_handler(state=DJForm.nickname)
async def process_nickname(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['nickname'] = message.text
    await DJForm.next()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∂–∞–Ω—Ä")

@dp.message_handler(state=DJForm.style_music)
async def process_style_music(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['style_music'] = message.text
    await DJForm.next()
    await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∏–∫ —Ç–≥/—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∫)")

@dp.message_handler(state=DJForm.contact)
async def process_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
        nickname = data['nickname']
        style_music = data['style_music']
        contact = data['contact']
    await bot.send_message(chat_id=384556684, text=f"–ù–∏–∫–Ω–µ–π–º: {nickname}\n–ñ–∞–Ω—Ä: {style_music}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\nchat_id: {message['from'].id}") #271883858 - –°–µ—Ä–∂
    await message.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –ù–µ –≤—ã–∫–ª—é—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üòâ 16 –∞–≤–≥—É—Å—Ç–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —ç—Ç–æ–º –±–æ—Ç–µ. –ï—Å–ª–∏ —Ç—ã –Ω–µ –Ω–∞–π–¥–µ—à—å —Å–µ–±—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –Ω–µ –≤–µ—à–∞–π –Ω–æ—Å –∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–∏–µ–∑–∂–∞–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º. –ë—ã–≤–∞–µ—Ç –≤—Å—è–∫–æ–µ, –∞ –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏–π—Å—è —Å–ª–æ—Ç –±—É–¥–µ—Ç –∑–∞ —Ç–æ–±–æ–π ü§òüèª")
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range="A:E",  # –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ A, B, C
        valueInputOption="USER_ENTERED",
        body={
            "majorDimension": "ROWS",
            "values": [[nickname, style_music, contact, message['from'].id, 'none']]
        }
    ).execute()
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ö—É—Ö–Ω–∏/–ë–∞—Ä–∞
@dp.message_handler(Text(equals='–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ö–Ω—é/–±–∞—Ä/—Ä—ã–Ω–æ—á–µ–∫ üå≠üçªüé®', ignore_case=True))
async def process_kitchen_application(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í 2024 –≥–æ–¥—É —É –Ω–∞—Å –∞–±—Å–æ–ª—é—Ç–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –Ω–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏. –ù–∞–º –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∑–Ω–∞—Ç—å, —á—Ç–æ –≤—ã –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç–µ –Ω–∏—á–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º –∏–ª–∏ —Ç–µ–º, —á—Ç–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ —Ñ–æ—Ä–º–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –ü–æ—ç—Ç–æ–º—É –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–¥–ª–µ–∂–∞—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.\n\n–ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —É —Å–µ–±—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –±–∞—Ä, –∫—É—Ö–Ω—é, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –¥—É—Ö–æ–≤–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º, –ø—Ä–æ–¥–∞–∂—É –±–µ–∑–¥–µ–ª—É—à–µ–∫ –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ. –ß–µ–º –±–æ–ª—å—à–µ –∑–∞–Ω—è—Ç–∏–π - —Ç–µ–º –≤—Å–µ–º –≤–µ—Å–µ–ª–µ–µ –∏ –ø—Ä–∏—è—Ç–Ω–µ–µ. –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ –≤–æ–ª–æ–Ω—Ç—ë—Ä, –ø—Ä–æ—Å—Ç–æ –≤ –ø—É–Ω–∫—Ç–µ 2 - –Ω–∞–ø–∏—à–∏ '–•–æ—á—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–∏—Ç—å'.")
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_kitchen_application"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=inline_kb)

@dp.callback_query_handler(lambda c: c.data == 'start_kitchen_application', state=None)
async def start_kitchen_application(callback_query: types.CallbackQuery):
    await KitchenForm.name.set()
    await bot.send_message(callback_query.from_user.id, "–ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")

@dp.message_handler(state=KitchenForm.name)
async def process_kitchen_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await KitchenForm.next()
    await message.answer("–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å?/–•–æ—á—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–∏—Ç—å")

@dp.message_handler(state=KitchenForm.description)
async def process_kitchen_description(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = message.text
    await KitchenForm.next()
    await message.answer("–û—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–∏–∫ —Ç–≥/—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∫)")

@dp.message_handler(state=KitchenForm.contact)
async def process_kitchen_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
        name = data['name']
        description = data['description']
        contact = data['contact']
    await bot.send_message(chat_id=384556684, text=f"–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {name}\n–ß—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Å—Ç–∞–≤–∏—Ç—å: {description}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\nchat_id: {message['from'].id}")#271883858 - –°–µ—Ä–∂
    await message.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏.")
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range="kitchenRequests!A:E",  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ A, B, C
        valueInputOption="USER_ENTERED",
        body={
            "majorDimension": "ROWS",
            "values": [[name, description, contact, message['from'].id, 'none']]
        }
    ).execute()
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ä—á–∞
@dp.message_handler(Text(equals='–ö—É–ø–∏—Ç—å –º–µ—Ä—á üëïüëö', ignore_case=True))
async def process_merch_application(message: types.Message):
    await message.reply(f"–û—Å—Ç–∞–≤—å —Å–≤–æ–π –≤ telegram  –¥–ª—è —Å–≤—è–∑–∏ –∏ –Ω–∞–ø–∏—à–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,\n—Ä–∞–∑–º–µ—Ä, –∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç. –° —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è –∏ —É—Ç–æ—á–Ω—è—Ç —Å–æ—Å—Ç–∞–≤ –∏\n–Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞.\n\n–ß–µ–º —Ä–∞–Ω—å—à–µ –≤–∞–º–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞, —Ç–µ–º –≤—ã—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å,\n—á—Ç–æ –∂–µ–ª–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä —É–∂–µ –±—É–¥–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞ –≤–∞–º–∏.\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!¬ª\n")
    inline_kb = types.InlineKeyboardMarkup()
    inline_kb.add(types.InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="start_merch_application"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=inline_kb)

@dp.callback_query_handler(lambda c: c.data == 'start_merch_application', state=None)
async def start_merch_application(callback_query: types.CallbackQuery):
    await MerchForm.name.set()
    await bot.send_message(callback_query.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è")

@dp.message_handler(state=MerchForm.name)
async def process_name_merch(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await MerchForm.next()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä")

@dp.message_handler(state=MerchForm.size)
async def process_merch_color(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = message.text
    await MerchForm.next()
    await message.answer("–ù–∞–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—ã–π —Ü–≤–µ—Ç")

@dp.message_handler(state=MerchForm.color)
async def process_merch_size(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['color'] = message.text
    await MerchForm.next()
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏")

@dp.message_handler(state=MerchForm.contact)
async def process_merch_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
        name = data['name']
        size = data['size']
        color = data['color']
        contact = data['contact']
    await bot.send_message(chat_id=384556684, text=f"–ò–º—è : {name}\n–†–∞–∑–º–µ—Ä: {size}\n–¶–≤–µ—Ç: {color}\n–ö–æ–Ω—Ç–∞–∫—Ç: {contact}")#271883858 - –°–µ—Ä–∂
    await message.reply("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É! –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –∏ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏.")
    values = service.spreadsheets().values().append(
        spreadsheetId=spreadsheet_id,
        range="merch!A:C",  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—Ç–æ—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ A, B, C
        valueInputOption="USER_ENTERED",
        body={
            "majorDimension": "ROWS",
            "values": [[name, color, size, contact]]
        }
    ).execute()
    await state.finish()

@dp.message_handler(Text(equals='–ì–¥–µ —Ç—É—Å–∞? üèù', ignore_case=True))
async def process_location(message: types.Message):
    channel_chat_id = -1001335969565
    message_id = 269
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=channel_chat_id, message_id=message_id)

@dp.message_handler(Text(equals='–ö–æ–≥–¥–∞ —Ç—É—Å–∞? üåö', ignore_case=True))
async def process_date(message: types.Message):
    channel_chat_id = -1001335969565
    message_id = 291
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=channel_chat_id, message_id=message_id)

@dp.message_handler(Text(equals='–ß—Ç–æ –º–Ω–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π? ‚õ∫Ô∏èü¶ç', ignore_case=True))
async def process_packing_list(message: types.Message):
    channel_chat_id = -1001335969565
    message_id = 259
    await bot.forward_message(chat_id=message.chat.id, from_chat_id=channel_chat_id, message_id=message_id)

@dp.message_handler(Text(equals='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º –¥–æ–Ω–∞—Ç–∏–∫ ‚ù§Ô∏è', ignore_case=True))
async def process_donate(message: types.Message):
    await message.reply(f"üö® <b>–î–û–ù–ê–¢ - –ù–ï–û–¢–™–ï–ú–õ–ï–ú–ê–Ø –ß–ê–°–¢–¨ FREE TEKNO!</b>\n–î—Ä—É–∑—å—è, –¥–ª—è –Ω–∞—Å –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã –≤–∞—à–∏ –¥–æ–Ω–∞—Ç—ã.\n–ö–∞–∂–¥–∞—è –∫–æ–ø–µ–π–∫–∞ –∏–¥—ë—Ç –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –Ω–∞ –∞—Ä–µ–Ω–¥—É\n–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∏ –ø–æ–∫—É–ø–∫—É —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –Ω–µ–≥–æ.\n–û—Å—Ç–∞–ª—å–Ω–æ–µ –±—É–¥–µ—Ç –ø–æ–¥–µ–ª–µ–Ω–æ –ø–æ—Ä–æ–≤–Ω—É –º–µ–∂–¥—É —É—á–∞—Å—Ç–≤—É—é—â–∏–º–∏\n—Å–∞—É–Ω–¥ —Å–∏—Å—Ç–µ–º–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–º–µ—â–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç.\n\n<b>–í–Ω–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –¥–≤–∏–∂–µ–Ω–∏–µ\nFREE TEKNO –Ω–∞ –∫–∞—Ä—Ç—É:\n2202 2067 3243 0694\n7 (987) 432-03-28 –°–±–µ—Ä\n–°–ï–†–ì–ï–ô –ê–†–¢–£–†–û–í–ò–ß –ë.</b>", parse_mode='HTML')

if __name__ == '__main__':
    executor.start_polling(dp)